IO流(Input Output)

IO技术主要的作用是解决设备与设备之间的数据传输问题。比如：硬盘---->内存，内存--->硬盘，键盘---->内存

IO技术的应用场景
    导出报表，上传照片，下载，xml文件

数据保存到硬盘上，该数据就可以做到永久性保存。数据一般适宜文件的形式保存到内存中

sun就使了一个File类描述了文件或文件夹。

File可以描述一个文件或文件路径

    File类的构造方法：
        File(String pathname) 指定文件或文件夹的路径创建一个File文件。
        File(File parent, String child) 柑橘parent抽象路径名和child路径名字符串创建一个新File实例。
        File(String parent, String child)

    目录分隔符 ： 在windows机器上的目录分隔符是\,在Linux机器上的目录分割符是/

    注意：在windows上面\与/都可以使用作为目录分隔符。而且，如果写/的时候只需写一个即可。

    路径问题：
        绝对路径：该文件在硬盘上的完整路径。绝对路径一般是以盘符开头的。

        相对路径：相对路径就是资源文件相对于当前程序所在的路径。

                .   当前路径。
                ..  上一级路径。

    注意：如果程序当前所在路径与资源文件不在同一个盘，不能使用相对路径。

    File类方法
        创建：
            createNewFile()     在指定位置创建一个文件，如果已存在就不创建然后返回false
            mkdir()             在指定位置创建目录，这只会创建最后一级目录，如果上级目录不存在就抛异常。
            mkdirs()            在指定位置创建目录，这会创建路径中所有不存在的目录。
            renameTo(File desc) 重命名文件或文件夹，也可以操作非空的文件夹，文件不同时相当于文件的剪切，剪切时候不能操作非空文件夹。移动/重命名成功则返回true，失败则返回false。

        删除：
            delete()    删除文件或一个空文件夹，如果文件夹不为空，则不能删除，成功返回true，失败返回false。
            deleteOnExit() 在虚拟机终止时，请求删除此抽象路径名表示的文件或目录，保证程序=异常时创建的临时文件也可以被删除

        判断：
            exists()            文件或文件夹是否存在。
            isFile()            是否为一个文件，如果不存在，则始终为false。
            isDirectory()       是否为一个目录，如果不存在，则始终为false。
            isHidden()          是否为隐藏文件或目录
            isAbsolute()        测试此抽象路径名是否为绝对路径名

        获取：
            geName()            获取文件或文件夹的名称，不包含上级路径
            getPath()           返回绝对路径，也可以是相对路径，但是目录要指定
            getAbsolutePath()   获取文件的绝对路径，与文件是否存在没关系
            length()            获取文件的大小（字节数），如果文件不存在则返回0L，如果是文件夹也返回0L
            getParent()         返回此抽象路径父目录的路径字符串，如果此路径名没有指定父目录，则返回null。
            lastModified()      获取最后一次被修改的时间

        文件夹相关：
            listRoots()         列出所有的根目录（windows中就是所有的系统盘符）
            list()              返回目录下的文件或者目录名，包含隐藏文件。对于文件，这样的操作会返回null
            list(FilenameFilter filter)     返回指定目录中符合过滤条件的子文件夹或目录。对于文件，这样的操作会返回null
            listFiles()         返回目录下的文件或者目录对象（File 实例） 包含隐藏文件。对于文件，这样的操作会返回null
            listFiles(FilenameFilter filter)    返回指定目录中符合过滤条件的子文件夹或目录。对于文件，这样的操作会返回null

File类 ：用于描述一个文件或文件夹的
通过File对象，我们可以读取文件或文件夹的属性数据，如果需要读取文件的内容数据，那么需要使用IO流

IO流（Input Output）

IO解决问题：解解决设备与设备之间的设备传输问题。

IO流技术：

IO流分类：
    如果按照数据的流向划分：
        输入流：

        输出流：

    判断使用输入留输出流依据：以当前程序以参照物，观察数据是输入流还是输出流，如果数据输出，则用输出流，如果输入，则用输入流

    按照处理的单位划分：
        字节流：字节流读取的都是文件中的二进制数据，读取到的二进制数据不会做任何处理

                输入字节流：
                    ------InputStream   所有输入字节流的基类 抽象类
                    ----------FileInputStream 读取文件数据的输入字节流
                                    FileInputStream读取文件的步骤：
                                        1.找到目标文件
                                        2.建立数据的输入通道
                                        3.读取文件中的数据
                    ----------BufferedInputStream 缓冲输入字节流   主要为了提高文件的读取效率，内部默认维护了一个8KB的字节数组
                                    注意：
                                        1.凡是缓冲流都不具备读写文件的能力
                                        2.当没有执行close()或数组没有写满，需要使用flush()刷新才能写入。
                    ----------SequenceInputStream() 序列输入字节流
                输入字节流：
                      -----OutStream    所有输出字节流的基类 抽象类
                      ----------FileOutputStream 想文件输出数据的输出字节流
                                         FileInputStream读取文件的步骤：
                                            1.找到目标文件
                                            2.建立数据的输出通道
                                            3.向文件写入数据
                      ----------BufferedOutputStream 缓冲输出字节流
                                注意：     1.如果目标文件不存在则创建文件
                                           2.如果目标文件已存在，会先清空源文件再写入
                                           3.目标文件已存在，需追加数据，传入true
                                           4.接收的是一个int类型的数据，但真正写入的是一个字节的数据，只取低八位，其他舍弃

                                           每创建一个FileOutputStream的时候，默认情况下，FileOutputStream的指针指向了开始的位置。每写一次，指向都会出现相应移动。

        字符流：字符流也是读取文件中的二进制，不过会把这些转换成我们能识别的字符
                字符流=字节流+解码
        字符流：
                输入字符流：
                    ------Reader() 所有输入字符流的基类
                    ----------FileReader() 输入字符流
                    ----------BufferedReader() 缓冲输入字节流

                输出字节流：Writer() 所有蔬菜输出字符流的基类
                    ------FileWriter() 所有输出字符流的基类
                    ----------FileWriter() 输出字符流
                    ----------BufferedWriter 缓冲输出字节流

    对象的输入输出流：对象的输入输出流主要作用是用于写对象的信息与读对象的信息。对象一旦写到文件上对象的信息可以做到持久化了
        对象的输出流：
            ObjectOutputStream
        对象的输入流
            ObjectInputStream
        对象的输入输出流要注意的细节：
            1.如果对象要被写到文件上，那么对象所属的类必须要实现Serializable接口，Serizlizable借口没有任何方法，只是一个标识借口而已。
            2.对象的反序列化创建对象的时候并不会调用到构造方法的。
            3.serialVersionUid是用于记录class文件的版本信息的，serivalVersionUid这个数字是通过一个类的类名、成员、包名、工程名算出的一个数字。
            4.使用ObjectInputStream反序列化的时候，ObjectInputStream会先读取文件中的serivalVersionUid，然后与本地的class文件的serivalVersionUid进行对比，
                如果两个id不一致，反序列化失败。
            5.如果序列化与反序列化的时候可能会修改类的成员，那么最好一开始就给这个类指定一个serivalVersionUid，如果一个类已经指定了serivalVersionUid，
                然后在序列化和反序列化的时候jvm再自己算这个class的serivalVersionUid了
            6.如果一个对象某个数据不想被序列化到硬盘上，可以使用关键字transient修饰。
            7.如果一个类维护了另外一个类的引用，那么另外一个类也需要实现Serializable接口。
        transient  透明，不会被序列化

    Properties(配置文件类)：主要用于生成配置文件，与读取配置文件信息。
        Properties  要注意的细节：
            1.如果配置文件的信息一旦使用了中文，那么用store方法生成配置文件的时候只能使用字符流解决，如果使用字节流生成配置文件的话，
                默认使用iso8859-1码表进行编码储存，这时候会出现乱码

    PrintStream 打印流  可以打印任意类型的数据，而且打印数据之前都会先把数据转换成子字符串再打印

    编码与解码：
        编码：把看得见的字符变成看不懂的码值，这个过程称为编码
        解码：按码值查找对应的字符，这个过程称为解码

    转换流：
        输入字节流的转换流
            InputStreamReader()
        输出字节流的转换流
            OutputStreamWriter() 可以把输出字节流转换成输出字符流
        转换流的作用：
            1.如果目前所获取到的需要转换字符流使用，这时候可以使用转换流。 字节流->字符流
            2.使用转换流可以指定编码表读写文件
